{"version":3,"file":"js/3938.bundle.js","mappings":"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","sources":["webpack:///node_modules/helper-vue-components/src/DynamicTemplate/Component.vue","webpack:///./node_modules/helper-vue-components/src/DynamicTemplate/Component.vue?76e0","webpack:///./node_modules/helper-vue-components/src/DynamicTemplate/Component.vue","webpack:///./node_modules/helper-vue-components/src/DynamicTemplate/Component.vue?4fd3","webpack:///./node_modules/vue-loader/lib/runtime/componentNormalizer.js"],"sourcesContent":["<template lang=\"pug\">\r\n    include Template.pug\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        props: {\r\n            params: {\r\n                type: Array|Object\r\n            },\r\n            template_type_name: {\r\n                type: String\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                configChanged: false,\r\n                paramChanged: false,\r\n                compiledTemplate: {}\r\n            }\r\n        },\r\n        mounted() {\r\n            let templateToCompile = {\r\n                template_type_name: this.template_type_name,\r\n                params: this.params\r\n            }\r\n            this.compiledTemplate = this.replaceConfigTemplates(templateToCompile)\r\n            this.compiledTemplate = this.HTMLDecodeTemplate(this.compiledTemplate)\r\n        },\r\n        computed: {\r\n            compiledTemplateText() {\r\n                return JSON.stringify(this.compiledTemplate)\r\n            }\r\n        },\r\n        methods: {\r\n            replaceConfigTemplates(config) {\r\n                let globalParams = config.params\r\n                do {\r\n                    this.configChanged = false\r\n                    config = this.replaceUpperConfigTemplates(config, globalParams)\r\n                }\r\n                while (this.configChanged)\r\n                return config\r\n            },\r\n            replaceUpperConfigTemplates(config, globalParams) {\r\n                if (Array.isArray(config)) {\r\n                    let self = this\r\n                    return config.map((configValue) => {\r\n                        return self.replaceUpperConfigTemplates(configValue, globalParams)\r\n                    })\r\n                }\r\n                else if (config && typeof(config) == 'object') {\r\n                    if ('template_type_name' in config) {\r\n                        return this.replaceTemplate(config, globalParams)\r\n                    }\r\n                    else {\r\n                        return this.replaceObjectTemplateProperties(config, globalParams)\r\n                    }\r\n                }\r\n                else {\r\n                    return config\r\n                }\r\n            },\r\n            replaceObjectTemplateProperties(config, globalParams) {\r\n                for (const [key, value] of Object.entries(config)) {\r\n                    if (value == null) {\r\n                        config[key] = null\r\n                    }\r\n                    else if (Array.isArray(value)) {\r\n                        let self = this\r\n                        config[key] = value.map((configValue) => {\r\n                            return self.replaceUpperConfigTemplates(configValue, globalParams)\r\n                        })\r\n                    }\r\n                    else if (typeof(value) == 'object') {\r\n                        if ('template_type_name' in value) {\r\n                            config[key] = this.replaceTemplate(value, globalParams)\r\n                        }\r\n                        else {\r\n                            config[key] = this.replaceUpperConfigTemplates(value, globalParams)\r\n                        }\r\n                    }\r\n                }\r\n                return config\r\n            },\r\n            replaceTemplate(config, globalParams) {\r\n                let templateConfig = getObjectSubProperty(window.templates, config.template_type_name)\r\n                if ('params' in config) {\r\n                    templateConfig = this.replaceTemplateParams(templateConfig, config.params, '++')\r\n                }\r\n                if (globalParams) {\r\n                    templateConfig = this.replaceTemplateParams(templateConfig, globalParams, '-++')\r\n                    templateConfig = this.replaceTemplateParams(templateConfig, globalParams, '--')\r\n                }\r\n                this.configChanged = true\r\n                return templateConfig\r\n            },\r\n            replaceTemplateParams(templateConfig, params, paramPrefix) {\r\n                do {\r\n                    this.paramChanged = false\r\n                    templateConfig = this.replaceUpperTemplateParams(templateConfig, params, paramPrefix)\r\n                } while (this.paramChanged)\r\n                return templateConfig\r\n            },\r\n            replaceUpperTemplateParams(template, params, paramPrefix) {\r\n                if (template == null) {\r\n                    return null\r\n                }\r\n                else if (Array.isArray(template)) {\r\n                    let arrayTemplate = []\r\n                    let self = this\r\n                    template.forEach((templateValue) => {\r\n                        let replacedTemplateValue = self.getReplacedTemplateValue(templateValue, params, paramPrefix)\r\n                        if (typeof templateValue == 'object' && 'array_data' in templateValue && templateValue.merge_to_parent) {\r\n                            arrayTemplate = arrayTemplate.concat(replacedTemplateValue)\r\n                        }\r\n                        else {\r\n                            arrayTemplate.push(replacedTemplateValue)\r\n                        }\r\n                    })\r\n                    return arrayTemplate\r\n                }\r\n                else if (typeof(template) == 'object') {\r\n                    if ('array_data' in template) {\r\n                        return this.createArrayTemplate(template, params[template.array_data], template.array_data)\r\n                    }\r\n                    else {\r\n                        let replaceTemplate = structuredClone(template)\r\n                        for (const [key, value] of Object.entries(replaceTemplate)) {\r\n                            replaceTemplate[key] = this.replaceUpperTemplateParams(value, params, paramPrefix)\r\n                        }\r\n                        return replaceTemplate\r\n                    }\r\n                }\r\n                else {\r\n                    return this.getTemplateValue(template, params, paramPrefix)\r\n                }\r\n            },\r\n            getReplacedTemplateValue(templateValue, params, paramPrefix) {\r\n                if (typeof templateValue == 'object' && 'array_data' in templateValue && templateValue.direct_paste) {\r\n                    return params[templateValue.array_data]\r\n                }\r\n                else {\r\n                    return this.replaceUpperTemplateParams(templateValue, params, paramPrefix)\r\n                }\r\n            },\r\n            createArrayTemplate(template, arrayParam, arrayParamName) {\r\n                if (arrayParam && Array.isArray(arrayParam)) {\r\n                    let replaceTemplate = structuredClone(template)\r\n                    delete replaceTemplate.array_data\r\n                    delete replaceTemplate.merge_to_parent\r\n                    return arrayParam.map((param) => {\r\n                        let configParam = {}\r\n                        configParam[arrayParamName] = param\r\n                        return this.replaceUpperTemplateParams(replaceTemplate, configParam, '++')\r\n                    })\r\n                }\r\n                else {\r\n                    return []\r\n                }\r\n            },\r\n            getTemplateValue(value, params, paramPrefix) {\r\n                if (typeof value == 'string') {\r\n                    if (value.indexOf(paramPrefix) == 0) {\r\n                        let valueToCheck = value.substring(paramPrefix.length)\r\n                        let replacedValue = getObjectSubProperty(params, valueToCheck, value)\r\n                        if (replacedValue != value) {\r\n                            this.paramChanged = true\r\n                        }\r\n                        return replacedValue\r\n                    }\r\n                    else {\r\n                        return value\r\n                    }\r\n                }\r\n                else {\r\n                    return value\r\n                }\r\n            },\r\n            HTMLDecodeTemplate(template) {\r\n                if (template == null) {\r\n                    return null\r\n                }\r\n                else if (Array.isArray(template)) {\r\n                    let arrayTemplate = []\r\n                    template.forEach((templateValue) => {\r\n                        arrayTemplate.push(this.HTMLDecodeTemplate(templateValue))\r\n                    })\r\n                    return arrayTemplate\r\n                }\r\n                else if (typeof(template) == 'object') {\r\n                    let replaceTemplate = structuredClone(template)\r\n                    for (const [key, value] of Object.entries(replaceTemplate)) {\r\n                        replaceTemplate[key] = this.HTMLDecodeTemplate(value)\r\n                    }\r\n                    return replaceTemplate\r\n                }\r\n                else if (typeof(template) == 'string') {\r\n                    return he.decode(template)\r\n                }\r\n                else {\r\n                    return template\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n","import mod from \"-!../../../vue-loader/lib/index.js??vue-loader-options!./Component.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../vue-loader/lib/index.js??vue-loader-options!./Component.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Component.vue?vue&type=template&id=79f12654&lang=pug&\"\nimport script from \"./Component.vue?vue&type=script&lang=js&\"\nexport * from \"./Component.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('dynamic-component',{attrs:{\"component_infos\":_vm.compiledTemplate}})\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent(\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */,\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options =\n    typeof scriptExports === 'function' ? scriptExports.options : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) {\n    // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () {\n          injectStyles.call(\n            this,\n            (options.functional ? this.parent : this).$root.$options.shadowRoot\n          )\n        }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functional component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection(h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n"],"names":["props","params","type","Array","Object","template_type_name","String","data","configChanged","paramChanged","compiledTemplate","mounted","templateToCompile","this","replaceConfigTemplates","HTMLDecodeTemplate","computed","compiledTemplateText","JSON","stringify","methods","config","globalParams","replaceUpperConfigTemplates","isArray","self","map","configValue","replaceTemplate","replaceObjectTemplateProperties","key","value","entries","templateConfig","getObjectSubProperty","window","templates","replaceTemplateParams","paramPrefix","replaceUpperTemplateParams","template","arrayTemplate","forEach","templateValue","replacedTemplateValue","getReplacedTemplateValue","merge_to_parent","concat","push","createArrayTemplate","array_data","structuredClone","getTemplateValue","direct_paste","arrayParam","arrayParamName","param","configParam","indexOf","valueToCheck","substring","length","replacedValue","he","decode","_c","_self","attrs","normalizeComponent","scriptExports","render","staticRenderFns","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","hook","options","_compiled","functional","_scopeId","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","call","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","_injectStyles","originalRender","h","existing","beforeCreate","exports"],"sourceRoot":""}